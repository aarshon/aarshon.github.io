{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Name: Aarshon George Roggy Class: EGR314 - 12:00PM Monday/Wednesday Professor: Dr. Kevin Nichols Team Website: Click Here!</p>"},{"location":"#home","title":"Home","text":"<p>Block Diagram Appendix Component Selection Schematic &amp; Bill of Materials</p>"},{"location":"#about-me","title":"About Me","text":"<p>Aarshon's EGR 314 Project Junior Year Engineering Showcase  </p> <p>About the Project Welcome! My name is Aarshon, and this project is part of my junior year Engineering showcase. Our mission is to design and deliver a STEM-themed, interactive, web-enabled device that inspires K-12 students to explore science, technology, engineering, and math (STEM). Team Goals</p> <p>Build a high-quality, market-ready product. Collaborate effectively as a team to deliver results. Stick to industry standards and modular design principles. Develop technical skills while solving real-world problems. Create a user-friendly experience for K-12 students. Focus on sustainability and innovation. Meet project deadlines and stay on budget. Team Coordination &amp; Accountability</p> <p>Our team consists of:  </p> <ul> <li>Aarshon: Team lead and systems integrator.</li> <li>Alex: Hardware specialist.</li> <li>Ian: Software developer.</li> <li>Kushagra: User experience designer and tester.</li> </ul>"},{"location":"background/","title":"Background","text":"<p>Aarshon George Roggy Team 306</p>"},{"location":"background/#introduction","title":"Introduction","text":"<p>My team members are: Ian Anderson, Kushagra D, Alex Comeaux </p>"},{"location":"background/#conclusions","title":"Conclusions","text":""},{"location":"background/#references","title":"References","text":""},{"location":"block-diagram/","title":"Embedded Systems Block Diagram","text":"<p>Author: Aarshon George Roggy Course: EGR 314 Professor: Dr. Kevin Nichols Team Members: Alex Comeaux, Ian Anderson &amp; Kushagara Dashora  </p>"},{"location":"block-diagram/#overview","title":"\ud83d\udccc Overview","text":"<p>This page presents the block diagram for the HMI subsystem in our embedded system project.</p>"},{"location":"block-diagram/#block-diagram-preview","title":"\ud83d\udcf7 Block Diagram Preview","text":""},{"location":"block-diagram/#download-the-block-diagram","title":"\ud83d\udcc1 Download the Block Diagram","text":"<p>Download Block Diagram PDF</p>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"component-selection/","title":"Component Selection","text":""},{"location":"component-selection/#home","title":"Home","text":""},{"location":"component-selection/#introduction","title":"Introduction","text":"<p>For our embedded systems design project, we're developing an interactive weather station designed to engage K-12 students with real-time environmental data. Our goal is to create a learning experience where students can easily navigate through different weather modules- like temperature, humidity, solar power and battery status- using a simple keypad driven interface.</p>"},{"location":"component-selection/#criteria","title":"Criteria","text":"<p>To ensure reliable operation, the HMI system requires a stable power supply, necessitating the integration of a voltage regulator. The PIC18F47Q10 microcontroller, selected for its low power consumption and direct compatibility with 5V peripherals, manages the user inputs and LCD output. The 16x2 I2C LCD is chosen for its low power usage and simple text display, while the 4x4 membrane keypad provides an efficient user interface for navigating through different data modules.  </p> <p>Additionally, the project incorporates a switching voltage regulator as part of a dedicated power supply lab requirement. This AP63203WU-7 switching regulator is being developed to improve power efficiency, particularly for potential expansion into low-power wireless communication modules. The voltage regulator design process includes selecting appropriate inductors, capacitors, and diodes to ensure stable operation under varying load conditions\u200b.</p> <p>This systematic component selection ensures the HMI module is power-efficient, durable, and user-friendly, meeting both educational and engineering design constraints.</p>"},{"location":"component-selection/#responsibilities","title":"Responsibilities:","text":"<ul> <li>Sensing: Although my subsystem does not include direct environmental sensing, it will receive sensor data from the sensing module via UART communication and display relevant readings (e.g., temperature, humidity, solar power levels).</li> <li>Actuation: The HMI itself does not control actuators, but it provides a user-friendly way to navigate sensor data, making it a crucial part of the interaction loop.</li> <li>Display: I am implementing a 16x2 I2C LCD, which will show current sensor data and allow users to switch between different weather parameters.</li> <li> <p>Power: The HMI module operates at 5V, requiring a stable AMS1117-5.0 linear voltage regulator to ensure consistent power delivery.  </p> </li> <li> <p>Communication: The PIC18F47Q10 microcontroller in my HMI module communicates with other subsystems via I2C (for the LCD) and UART (for receiving sensor data).</p> </li> </ul>"},{"location":"component-selection/#components","title":"Components","text":""},{"location":"component-selection/#microcontroller-selection","title":"Microcontroller Selection","text":""},{"location":"component-selection/#option-1","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link PIC18F47Q10 (Final Choice) Low power, optimized for standalone HMI No WiFi/Bluetooth $5.40 DigiKey Supports I2C for LCD and GPIO for Keypad Limited RAM compared to ESP32 Reliable MPLAB XC8 &amp; MCC support 5V operation (compatible with LCD &amp; keypad)"},{"location":"component-selection/#option-2","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link PIC18F45K50 USB support Lacks built-in MCC Harmony compatibility $6.40 DigiKey More ADC channels May require more external circuitry Slightly cheaper than PIC18F47Q10"},{"location":"component-selection/#option-3","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link ESP32-S3-WROOM-1 Built-in WiFi/Bluetooth 3.3V logic (incompatible with some peripherals) $3.40 DigiKey Faster CPU &amp; more RAM Higher power consumption Integrated hardware acceleration More complex firmware development"},{"location":"component-selection/#final-selection-pic18f47q10-option-1","title":"Final Selection: PIC18F47Q10 (Option 1)","text":""},{"location":"component-selection/#rationale","title":"Rationale:","text":"<ul> <li>Low power operation suitable for an HMI system.</li> <li>5V compatibility ensures direct connection with LCD and keypad.</li> <li>Sufficient GPIO and I2C support for efficient module control.</li> <li>Microchip MCC integration simplifies firmware development.</li> </ul>"},{"location":"component-selection/#keypad-selection","title":"Keypad Selection:","text":"<p>The keypad serves as the primary navigation and input interface for the HMI.</p>"},{"location":"component-selection/#option-1_1","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link Membrane 4x4 Keypad (Final Choice) Thin, lightweight, flexible Less tactile feedback $5.95 DigiKey Part Number: 1528-2672-ND Easy to mount on an enclosure Can wear out over time Low power consumption"},{"location":"component-selection/#option-2_1","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link SWITCH JOYSTICK ANALOG 50V Switch is small, making it ideal for compact PCB layouts and space-constrained applications. Typically rated for low current (e.g., 50mA\u2013500mA), which may not be suitable for switching higher-power loads directly. $2.96 DigiKey Part Number: 108-THB001P-ND Provides a clear, tactile response for button presses. It will eventually degrade over time with heavy usage. Suitable for frequent use in embedded systems. Requires external components (e.g., pull-down resistors or debouncing circuits)"},{"location":"component-selection/#option-3_1","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link Tactile Pushbutton Array (Custom) Fully customizable button layout Requires additional wiring and PCB routing $5.95 DigiKey Part Number: TL3315NF160Q Strong feedback Can increase PCB complexity"},{"location":"component-selection/#final-selection-membrane-4x4-keypad-option-1","title":"Final Selection: Membrane 4x4 Keypad (Option 1)","text":""},{"location":"component-selection/#rationale_1","title":"Rationale:","text":"<ul> <li>Low power consumption is ideal for embedded applications.</li> <li>Compact &amp; lightweight for HMI panel mounting.</li> <li>Easier integration using GPIO-based matrix scanning.</li> </ul>"},{"location":"component-selection/#lcd-display-selection","title":"LCD Display Selection","text":"<p>The LCD display provides real-time feedback to the user, showing the selected module.</p>"},{"location":"component-selection/#option-1_2","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link 16x2 I2C LCD (Final Choice) Easy I2C communication No graphical output $13.95 DigiKey Part Number: NHD-C0216CIZ-FSW-FBW-3V3 Low power, simple to use Limited characters Readable in sunlight"},{"location":"component-selection/#option-2_2","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link 20x4 I2C LCD Larger display area Larger size may not fit in HMI panel $14.00 DigiKey Same I2C interface as 16x2 Slightly higher power consumption More readable text"},{"location":"component-selection/#option-3_2","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link 128x64 Graphical LCD Can display graphs/icons More complex software control $17.45 DigiKey High contrast output Requires SPI instead of I2C"},{"location":"component-selection/#final-selection-16x2-i2c-lcd-option-1","title":"Final Selection: 16x2 I2C LCD (Option 1)","text":""},{"location":"component-selection/#rationale_2","title":"Rationale:","text":"<ul> <li>Supports text-based menu navigation.</li> <li>I2C interface reduces GPIO usage.</li> <li>Low power consumption suits embedded applications.</li> </ul>"},{"location":"component-selection/#voltage-regulator-selection","title":"Voltage Regulator Selection:","text":""},{"location":"component-selection/#option-1_3","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link AP63203WU-7 (Final Choice) Low-cost, widely used Adjustable Output Voltage $1.38 DigiKey Part Number: AP63203WU-7 High Efficiency Produces heat at high loads"},{"location":"component-selection/#option-2_3","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link LM7805 Linear Regulator Simple drop-in solution Higher power loss than AMS1117 $1.07 DigiKey Part Number: MC7805CTG Stable 5V output Requires heatsink at higher currents"},{"location":"component-selection/#option-3_3","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link LM2575 Switching Regulator Higher efficiency More complex circuit (requires inductor) $2.84 DigiKey Part Number: LM9071SX/NOPB Less heat dissipation Higher cost"},{"location":"component-selection/#final-selection-ap63203wu-7","title":"Final Selection: AP63203WU-7","text":""},{"location":"component-selection/#rationale_3","title":"Rationale:","text":"<ul> <li>High Efficiency and Low Power Dissipation</li> <li>Wide Input Voltage Range</li> <li>Adjustable Output Voltage</li> <li>Fewer external components, simplifying PCB layout and reducing cost.</li> </ul>"},{"location":"component-selection/#library-and-compatibility-research-for-pic18f47q10","title":"Library and Compatibility Research for PIC18F47Q10","text":"<ul> <li>To ensure seamless integration of peripherals, I conducted research on library support, potential compatibility issues, and existing code examples for the PIC18F47Q10. The focus was on the 4x4 matrix keypad, the 16x2 I2C LCD, and voltage regulation to verify that all components could be efficiently interfaced with the microcontroller.</li> </ul>"},{"location":"component-selection/#keypad-4x4-matrix-compatibility-check","title":"Keypad (4x4 Matrix) Compatibility Check","text":"<p>The 4x4 matrix keypad is interfaced using GPIO row-column scanning, where each key press is detected by determining which row and column are connected when a button is pressed. MPLAB XC8 does not include a built-in library for keypad scanning, so a custom row-column scanning function will be implemented. One known issue with matrix keypads is button debounce, which must be handled in firmware to avoid unintended multiple key detections when a button is pressed.</p> <p>To address this, a state-based debounce algorithm will be implemented, and the rows and columns will be scanned using direct GPIO manipulation in MPLAB XC8. This ensures accurate key detection and reliable input processing.</p>"},{"location":"component-selection/#16x2-lcd-i2c-compatibility-check","title":"16x2 LCD (I2C) Compatibility Check","text":"<ul> <li> <p>The selected LCD module communicates using the I2C protocol, which reduces the number of GPIO pins required compared to a parallel-interface LCD. The MPLAB XC8 environment includes support for I2C communication, and the LiquidCrystal_I2C.h library is compatible with PIC18F microcontrollers, simplifying integration. However, some LCD controllers, such as the Hitachi HD44780 and its variants, require specific initialization sequences that may differ between models.</p> </li> <li> <p>To ensure compatibility, the initialization sequence will be tested, and any necessary adjustments will be made within the LiquidCrystal_I2C.h library. This will ensure that the LCD correctly displays menu options and sensor data as intended.</p> </li> </ul>"},{"location":"component-selection/#voltage-regulator-ap63203wu","title":"Voltage Regulator (AP63203WU)","text":"<ul> <li> <p>The HMI system requires a stable 5V power supply to ensure proper operation of the PIC microcontroller, keypad, and LCD. The AP63203WU was selected as the voltage regulator due to its high efficiency and reduced heat dissipation compared to traditional linear regulators like the AMS1117-5.0. As a synchronous buck converter, it provides up to 95% efficiency, minimizing power loss and heat generation.</p> </li> <li> <p>Unlike the AMS1117-5.0, which wastes energy as heat, the AP63203WU efficiently steps down higher input voltages (3.8V to 32V) to a stable 5V output, making it suitable for battery-powered and energy-sensitive applications.</p> </li> </ul>"},{"location":"component-selection/#mcc-pin-configuration","title":"MCC Pin Configuration","text":"Peripheral Purpose Assigned Pins GPIO 4x4 Keypad (Row-Column Scanning) RB0 - RB7 I2C (MSSP1) LCD Communication SDA: RC4, SCL: RC3 UART (EUSART1) Data exchange with other modules TX: RB7, RX: RB6 5V Power Voltage Regulation AMS1117-5.0"},{"location":"component-selection/#pin-allocation-analysis","title":"Pin Allocation Analysis","text":"<p>While setting up the MCC configuration, I made sure that all the peripherals were assigned to available pins without any conflicts. Since UART communication is critical for the HMI to send and receive data, I moved the TX (transmit) to RB7 and RX (receive) to RB6 instead of using the default UART pins. This setup still works perfectly with the PIC18F47Q10 and ensures reliable communication with the other subsystems.</p> <p>For the keypad input, I mapped the GPIOs to RB0-RB7 so the microcontroller can efficiently scan which button is pressed using row-column multiplexing. The I2C interface for the LCD display is set to RC4 (SDA) and RC3 (SCL), which are dedicated I2C pins on the PIC, making communication with the LCD simple and reliable.</p> <p>After setting everything up in MCC, I checked the generated initialization code, and everything looked good\u2014no errors, no conflicts. The microcontroller has enough available pins for all required functions, and I also accounted for power management to ensure a stable 5V supply to the PIC, LCD, and keypad.</p>"},{"location":"component-selection/#conclusion","title":"Conclusion","text":"<p>The component selection process for the HMI subsystem was guided by several key factors, including compatibility, power efficiency, ease of integration, and reliability. The PIC18F47Q10 microcontroller was chosen due to its low power consumption, built-in I2C support for the LCD, and GPIO capabilities for keypad scanning, making it the most suitable option for this project. The 16x2 I2C LCD was selected for its simple interface, low power requirements, and clear text display, ensuring that users can easily navigate and view real-time weather data.</p> <p>For user input, the 4x4 membrane keypad was chosen due to its compact design, durability, and ease of integration using direct GPIO scanning. To maintain a stable power supply, the AMS1117-5.0 linear voltage regulator was selected to provide a consistent 5V output to the microcontroller, LCD, and keypad, ensuring that all components operate without voltage fluctuations.</p> <p>```</p>"},{"location":"schematic/","title":"Schematic","text":""},{"location":"schematic/#schematic-image","title":"Schematic Image","text":""},{"location":"schematic/#download-the-schematic-diagram","title":"\ud83d\udcc1 Download the Schematic Diagram","text":"<p>Download Schematic Diagram PDF</p>"},{"location":"schematic/#download-the-schematic-zip-file","title":"\ud83d\udcc1 Download the Schematic Zip File","text":"<p>Download Schematic Zip File</p>"},{"location":"second-page/","title":"Second Page","text":"<p>Things to discuss</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}