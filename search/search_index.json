{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Name: Aarshon George Roggy Class: EGR314 - 12:00PM Monday/Wednesday Professor: Dr. Kevin Nichols Team Website: Click Here!</p>"},{"location":"#home","title":"Home","text":"<p>Block Diagram Appendix Component Selection Schematic Bill of Materials Power Allocation API\\ Version 2.0</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Introduction Welcome! My name is Aarshon, and this project is part of my junior year Engineering showcase. Our mission is to design and deliver a STEM-themed, interactive, web-enabled device that inspires K-12 students to explore science, technology, engineering, and math (STEM).  </p> <p>Welcome to my Embedded Systems HMI Subsystem project for EGR314. I am developing an interactive Human-Machine Interface (HMI) as part of a larger weather station system. This HMI will provide real-time data display and user input functionality, ensuring seamless interaction with the system\u2019s environmental sensors and power management units. My design leverages a PIC18F47Q10 microcontroller, a membrane keypad for user input, and an OLED display for data visualization. The system is engineered with a focus on energy efficiency, modularity, and intuitive usability, making it suitable for STEM education applications.</p>"},{"location":"#mission-statement","title":"Mission Statement","text":"<p>Our team aims to develop an interactive, STEM-themed educational display that engages K-12 students by showcasing real-time weather data through an intuitive HMI. The project emphasizes energy efficiency, modularity, and ease of use, ensuring both technical excellence and alignment with educational standards.</p>"},{"location":"#team-charter","title":"Team Charter:","text":"<p>Collaboration: Each member is accountable for their subsystem while supporting team-wide integration. Innovation: We prioritize creative problem-solving and efficiency improvements in both hardware and software. Professionalism: We adhere to engineering best practices, ensuring a structured and well-documented design process. Education &amp; Outreach: Our system is designed to inspire curiosity in STEM fields by making engineering principles accessible to young learners.  </p>"},{"location":"#team-goals","title":"Team Goals","text":"<p>Build a high-quality, market-ready product. Collaborate effectively as a team to deliver results. Stick to industry standards and modular design principles. Develop technical skills while solving real-world problems. Create a user-friendly experience for K-12 students. Focus on sustainability and innovation. Meet project deadlines and stay on budget. Team Coordination &amp; Accountability</p> <p>Our team consists of:  </p> <ul> <li>Aarshon: Team lead and systems integrator.</li> <li>Alex: Hardware specialist.</li> <li>Ian: Software developer.</li> <li>Kushagra: User experience designer and tester.</li> </ul>"},{"location":"API/","title":"API Application Programming Interface","text":"<p>The HMI Subsystem API enables seamless UART-based communication with other subsystems using a structured daisy-chain protocol. This ensures reliable data transmission between the ESP32-WROOM and other modules while preventing conflicts or message loss. The message structure follows a 64-byte format with defined prefixes, suffixes, sender/receiver IDs, and data payloads.</p>"},{"location":"API/#team-member-ids","title":"Team Member IDs","text":"Name Subsystem Address Char Add Aarshon HMI <code>0x61</code> 'a' Alex Motor <code>0x63</code> 'c' Ian Sensor <code>0x69</code> 'i' KD Websocket <code>0x6B</code> 'k' <p>Ian Sensor:  API DATASHEET Alex Motor:  API DATASHEET KD MQTT:  API DATASHEET </p>"},{"location":"API/#messages-sent-and-received-by-hmi","title":"Messages Sent and Received by HMI:","text":""},{"location":"API/#a-message-the-hmi-sends","title":"A. Message the HMI Sends:","text":"Byte(s) Variable Data Type Min Max Example 1 msg_type <code>char</code> <code>2</code> <code>2</code> <code>2</code> 2 command_code <code>uint8_t</code> <code>1</code> <code>255</code> <code>1=UP</code> 3-4 command_value <code>uint16_t</code> <code>0</code> <code>65535</code> <code>100</code> <p>Description: This message is sent from the HMI ('a') to other subsystems like Alex ('c'), Ian ('i'), or KD ('k') to trigger a specific action. The command_code defines the type of command (e.g., up, down, setpoint), and command_value provides any numeric parameter associated with the command.</p> Byte(s) Variable Data Type Min Max Example 1 msg_type <code>char</code> <code>3</code> <code>3</code> <code>3</code> 2-58 display_msg <code>char[57]</code> <code>1</code> <code>57</code> <code>hello user</code> <p>Description: Sent by the HMI to itself ('a'), this message requests a string be shown on the display. It can be used to confirm a command, show sensor status, or provide user feedback.</p>"},{"location":"API/#user-command","title":"User Command:","text":"(Msg_type = '2') to: Alex ('c'), Ian ('i') or KD ('k)"},{"location":"API/#display-update-request","title":"Display Update Request:","text":"(Msg_type = '3') to: Self (Aarshon: 'a')"},{"location":"API/#b-message-the-hmi-receives","title":"B. Message the HMI Receives:","text":"<p>(Msg_type = '1'): From: Ian('i), Broadcast('X')</p> Byte(s) Variable Data Type Min Max Example 1 msg_type <code>char</code> <code>1</code> <code>1</code> <code>1</code> 2 sensor_num <code>uint8_t</code> <code>1</code> <code>4</code> <code>3 = Humidity</code> 3-4 sensor_val <code>uint16_t</code> <code>0</code> <code>1300</code> <code>45</code> <p>Description: Sent from Ian\u2019s sensor subsystem ('i') or as a broadcast ('X'), this message contains a sensor number and a corresponding value. The HMI reads this data and may display it or log it.</p> <p>(Msg_Type = '4'), From: Alex ('c'), Ian ('i'), KD ('k) or Broadcast ('X')</p> Byte(s) Variable Data Type Min Max Example 1 msg_type <code>char</code> <code>4</code> <code>4</code> <code>4</code> 2 display_msg <code>uint8_t</code> <code>0</code> <code>5</code> <code>1 = Overload</code> <p>Description: Used by any subsystem to indicate a known error condition via a numeric code. The HMI will display or log the error based on the err_code received.</p> <p>(Msg_Type = '5'), From: Alex ('c'), Ian ('i'), KD ('k) or Broadcast ('X')</p> Byte(s) Variable Data Type Min Max Example 1 msg_type <code>char</code> <code>5</code> <code>5</code> <code>5</code> 2-58 err-msg <code>char[57]</code> <code>1</code> <code>57</code> <code>Sensor 1 Read Error</code> <p>Description: This message communicates a descriptive error string (up to 57 characters). It provides a human-readable reason for system faults (e.g., \u201csensor 1 read error\u201d) that the HMI can show or log.</p>"},{"location":"API/#sensor-broadcast","title":"Sensor Broadcast:","text":""},{"location":"API/#subsystem-error-code","title":"Subsystem Error Code:","text":""},{"location":"API/#subsystem-error-message","title":"Subsystem Error Message:","text":""},{"location":"API/#frame-structure-summary","title":"Frame Structure Summary:","text":"Byte Index Description Value Example [0] Start Byte 1 'A' [1] Start Byte 2 'Z' [2] Sender ID 'a' [3] Receiver ID 'i','c',etc. [4] msg_type <code>1</code> - <code>5</code> [5-n] Data / Message / Payload Varies [n+1] End Byte 1 'Y' [n+2] End Byte 2 'B'"},{"location":"background/","title":"Background","text":"<p>Aarshon George Roggy Team 306</p>"},{"location":"background/#introduction","title":"Introduction","text":"<p>My team members are: Ian Anderson, Kushagra D, Alex Comeaux </p>"},{"location":"background/#conclusions","title":"Conclusions","text":""},{"location":"background/#references","title":"References","text":""},{"location":"bill-of-materials/","title":"HMI Subsystem for STEM-Based Weather Station Report: Bill of Materials","text":"<p>This HMI subsystem is designed to provide a robust, low-power, and user-friendly interface for a STEM-based weather station, featuring a ESP32-S3-WROOM microcontroller, an I\u00b2C character OLED , a 4\u00d74 membrane keypad, and a high-efficiency switching regulator. By consolidating essential functionalities\u2014data display, user input, and modular expansion\u2014this solution offers a compact yet scalable platform suitable for educational and real-world applications.</p>"},{"location":"bill-of-materials/#navigate","title":"Navigate:","text":"<ul> <li>Bill of Materials</li> <li>Rationale (Components)</li> <li>Conclusion</li> <li>Download BOM (.xlsx)</li> </ul>"},{"location":"bill-of-materials/#download-the-excel-file","title":"Download the Excel File","text":"<p>An Excel file containing the full Bill of Materials (BOM) for this HMI subsystem is available for direct download. It details component part numbers, quantities, and brief descriptions to assist in procurement and assembly. The excel file is also converted into a csv file and embedded below: </p> <p>Download Here</p>"},{"location":"bill-of-materials/#functional-pathbypath","title":"Functional Path\u2011by\u2011Path","text":""},{"location":"bill-of-materials/#powerin-protection","title":"Power\u2011in &amp; Protection","text":"<p>12V barrel jack\u202f\u2192\u202fresettable fuse (1\u202f.5\u202fA)\u202f\u2192\u202fAP63203WU\u20117 buck\u202f\u2192\u202f3\u202f.3\u202fV rail (\u00b12\u202f%)  </p> <p>Why it matters: the weather\u2011station kiosk must survive a student plugging in the wrong wall wart or shorting the keypad ribbon. The polyfuse trips at \u2248\u202f2\u202fA within 500\u202fms; the buck\u2019s hiccup\u2011mode current limit keeps dissipation &lt;\u202f0.6\u202fW during the event. </p>"},{"location":"bill-of-materials/#esp32-core","title":"ESP32 Core","text":"<p>Xtensa dual\u2011core MCU @ 240\u202fMHz, on\u2011board 40\u202fMHz crystal. The ESP32 is oversized for a simple menu, but it fulfils two latent needs: Wi\u2011Fi/MQTT expansion (remote weather upload) and  OTA updates. Its domain powers down to 25\u202f\u00b5A when the booth closes; wake\u2011up sources (keypad row pins) are wired for level interrupts so a child\u2019s press instantly revives the display.</p>"},{"location":"bill-of-materials/#sensor-data-reception-uart-daisychain","title":"Sensor Data Reception (UART Daisy\u2011Chain)","text":"<p>RX pin (GPIO\u202f16) only, because HMI is terminal node; addressed frames AZ\u2026YB A 47\u202f\u03a9 series resistor gives a margin\u2014real\u2011world protection when multiple PCBs dangle off clip leads. Firmware rejects any frame not addressed to 0x61 or broadcast, prints it to the teacher\u2019s console for assessment, then parses the payload table you finalised (SUB_TEMP, SUB_HUM \u2026). Outcome for users: numbers on screen always match the upstream sensor PCB; garbled data is silently dropped, keeping the demo frustration\u2011free for children.</p>"},{"location":"bill-of-materials/#user-input-4-4-keypad","title":"User Input (4\u202f\u00d7\u202f4 Keypad)","text":"<p>Columns (outputs) and rows (inputs) are chosen from non\u2011strapping GPIOs so the ESP32 still boots after a row is pressed at power\u2011up. Internal pull\u2011ups remove eight discretes; a ground\u2011guard moat and keep\u2011out under the ribbon cable lower capacitive coupling so the scan loop can run at 1\u202fkHz without ghosting\u2014ensuring every rapid keypress from the kids are registered.</p>"},{"location":"bill-of-materials/#visual-output-ssd1306-oled-i2c","title":"Visual Output (SSD1306 OLED, I\u00b2C)","text":"<p>The 0.96\u2033 OLED runs at 3\u202f.3\u202fV, so level\u2011translation is unnecessary\u2014fewer parts. A 2.2\u202fk\u03a9 pulls let the bus stretch\u2011clock, an SSD1306 quirk. The display buffer lives in ESP32 SRAM; The ESP32 core frees the CPU to keep parsing UART frames even during full\u2011screen updates.</p>"},{"location":"bill-of-materials/#motor-control-relay-to-alexs-actuator-node","title":"Motor Control Relay (to Alex\u2019s actuator node)","text":"<p>The keypad\u2019s * and # send \u00b15\u202f\u00b0 commands down\u2011chain (MSG_MOTOR_SET).</p>"},{"location":"bill-of-materials/#bill-of-materials","title":"Bill of Materials:","text":"Comment Description Designator Footprint LibRef Quantity Unit Prototype Cost Total Cost Manufacturer Manufacturer Part Vendor Link Datasheet Link 4X4Membrane3844 Adapter; TNC Male to BNC Female; Brass; Brass (Male), Beryllium Copper (Female) CMP-00001-1 1 $5.95 $5.95 Adafruit Industries LLC 1528-2672-ND Digikey - Adafruit 3844 Digikey Datasheet - 3844 865230640005 WCAP-AS5H Aluminum Electrolytic Capacitors 1uF WCAP-AS5H_D4H5.5 CMP-00009-1 10 $0.18 $1.80 W\u00fcrth Elektronik 732-8270-2-ND Digikey - WCAP-AS5H WE Datasheet - WCAP-AS5H 2x22uF Ceramic Capacitor, Multilayer, Ceramic, 100V, 10% +Tol, 10% -Tol, X7R, 15% TC, 0.1uF, Surface Mount, 1206 100nF FP-1206-L_3_2_0_2-W_1_6_0-IPC_B CMP-00010-1 10 $0.06 $0.64 Cal-Chip Electronics, Inc. 4713-GMC10X7R562K100NTTR-ND Digikey - Cal-Chip GMC10X7R562K100NT Cal-Chip Datasheet - GMC Series 10uF Ceramic Capacitor, Multilayer, Ceramic, 100V, 10% +Tol, 10% -Tol, X7R, 15% TC, 0.1uF, Surface Mount, 1206 C3 FP-1206-L_3_2_0_2-W_1_6_0-IPC_B CMP-00010-1 5 $0.41 $2.05 Murata Electronics 490-11166-2-ND Digikey - Murata GCM319R71H104KA37D Murata Datasheet - GCM319R71H104KA37-01 0.1uF 25V Ceramic Capacitor, Multilayer, Ceramic, 25V, 10% +Tol, 10% -Tol, X7R, 15% TC, 0.1uF, Surface Mount, 1206 C4 FP-C1206C-EB-MFG CMP-00015-1 10 $0.10 $1.00 Cal-Chip Electronics, Inc. 4713-GMC04CG4R7C25NTCT-ND Digikey - Cal-Chip GMC04CG4R7C25NT Cal-Chip Datasheet - GMC Series 2 EA_DOGM204W-A Display DS1 EADOGM204WA EA_DOGM204W-A 1 $12.89 $12.89 Display Visions EA DOGM204N-A Mouser - EA_DOGM204W-A Mouser Datasheet - DOGM204 4628 5mm Slim Line Fuse holder F4 FUSE_4628 CMP-006-000000-1 2 $1.29 $2.58 Littelfuse 576-05200101Z Mouser - Littelfuse 05200101Z Littelfuse Datasheet - Fuse Block 520 70246-0801 Connector Header Top Entry, PH Series, 4 Position, 2.00mm, Through Hole, Press-Fit, Solder, Ivory J1A, J1B, J1C FP-B4B-PH-K_LF_SN-MFG CMP-00032-1 10 $0.36 $3.59 TE Connectivity AMP Connectors A24166-ND Digikey - TE 644752-4 TE Datasheet - 644752-4 90120-0123 Board Connector, 3 Contact(s), 1 Row(s), Male, Straight, 0.1 inch Pitch, Solder Terminal, Black Insulator, Receptacle J2 FP-90120-0123-MFG CMP-00025-1 5 $0.72 $3.60 Molex WM8073-ND Digikey - Molex 0901200123 Molex Datasheet - 90120-0123 Conn 01x02 Board Connector, 2 Contact(s), 1 Row(s), Male, Straight, 0.1 inch Pitch, Solder Terminal, Locking, Black Insulator, Receptacle J4 90120-0762-Footprint-1 CMP-00026-1 10 $0.40 $3.98 TE Connectivity AMP Connectors A121480-ND Digikey - TE 5-146280-2 TE Datasheet - 5-146280-2 4.7uH General Purpose Inductor, 4.7uH, 20%, 1 Element, Composite-Core, SMD, 2525 L1 FP-IHLP-2525EZ-FP_2_413x3-MFG CMP-00011-1 10 $0.17 $1.68 Murata Electronics 490-6689-1-ND Digikey - Murata LQM21NN4R7K10L Murata Datasheet - JELF243B-0005 Conn 01x08 Board Connector, 8 Contact(s), 1 Row(s), Male, Straight, 0.1 inch Pitch, Solder Terminal, Locking, Black Insulator, Plug P2 61300811121 CMP-00017-1 5 $1.31 $6.55 3M 929974E-01-08-ND Digikey - 3M 929974-01-08 3M Datasheet - Boardmount Connector 10k 0.25w Fixed Resistor, Metal Glaze/thick Film, 0.25W, 10000ohm, 200V, 5% +/-Tol, 200ppm/Cel, Surface Mount, 1206 R3, R4, R5 FP-CR1206-IPC_C CMP-00022-1 10 $0.02 $0.18 YAGEO 311-649FRCT-ND Digikey - Yageo RC1206FR-07649RL Yageo Datasheet - RC Group 51 220 0.25w Fixed Resistor, Metal Glaze/thick Film, 0.25W, 220ohm, 200V, 1% +/-Tol, 100ppm/Cel, Surface Mount, 1206 R6 RESC3216X60X45NL10T20 CMP-00024-1 10 $0.02 $0.21 YAGEO 311-220FRCT-ND Digikey - Yageo RC1206FR-07220RL Yageo Datasheet - RC Group 51 PC TEST POINT MINIATURE RED tht test point T1, T3 Test point-Footprint-1 CMP-00030-3 10 $0.29 $2.93 Keystone Electronics 36-5000-ND Digikey - Keystone 5000 Keystone Datasheet - 36-5000 AP63203WU-7 Buck Switching Regulator IC Positive Fixed 3.3V 1 Output 2A SOT-23-6 Thin, TSOT-23-6 U2 FP-TSOT26-MFG CMP-00004-1 4 $1.38 $5.52 Diodes Incorporated AP63203WU-7DICT-ND Digikey - Diodes AP63203WU-7 Diodes Datasheet - AP63203 PIC18F47Q10-I/PT RISC Microcontroller, 8-Bit, FLASH, PIC18 CPU, 64MHz, CMOS, PQFP44 U1 FP-C04-076-IPC_A CMP-00000-1 3 $1.49 $4.47 Microchip Technology PIC18F47Q10-I/PT-ND Digikey - Microchip PIC18F47Q10 Microchip Datasheet - PIC18F47Q10 <p>Power Line Selector: 90120-0123 - Justification: A 3-pin header/jumper to conveniently switch between external 12\u202fV and other potential sources (if needed). Rated to handle current from the 12\u202fV, 15\u202fA adapter without significant loss.</p> <p>4\u00d74 Membrane Keypad: Adafruit #3844 - Justification: Provides sixteen tactile inputs with minimal board real estate and easy integration. Matrix scanning is straightforward, and it connects directly to the PIC\u2019s GPIO pins for interrupt-driven input (arrows and menu control).</p> <p>Switching Voltage Regulator: AP63203WU-7</p> <ul> <li>Justification: Converts 12\u202fV input down to 3.3\u202fV efficiently (up to 2\u202fA). Its low quiescent current and synchronous design improve overall power efficiency, vital for reliable operation under varying loads.</li> </ul> <p>Upstream/Downstream Headers: 70246-0801</p> <ul> <li>Justification: Low-profile, shrouded Molex connectors that provide robust mechanical and electrical connections. They carry power (12\u202fV and 3.3\u202fV) and I\u00b2C signals for modular expansion or daisy-chaining additional sensors.</li> </ul>"},{"location":"bill-of-materials/#conclusion","title":"Conclusion","text":"<p>With this set of carefully chosen components, the HMI subsystem is both easy to use and highly adaptable for weather station projects. The PIC18F47Q10 microcontroller provides a powerful but straightforward foundation, while the I\u00b2C LCD and 4\u00d74 membrane keypad let users navigate and manage features\u2014like solar panel control\u2014with minimal wiring. The AP63203WU-7 switching regulator cleanly converts the 12\u202fV, 15\u202fA supply down to a stable 3.3\u202fV level, ensuring reliable performance for every part of the system. Expansion headers make it simple to add or swap in new modules, so the design can grow alongside project needs. Overall, this hardware setup meets STEM requirements by balancing reliability, efficiency, and ease of assembly.</p>"},{"location":"block-diagram/","title":"Embedded Systems Block Diagram","text":"<p>Author: Aarshon George Roggy Course: EGR 314 Professor: Dr. Kevin Nichols Team Members: Alex Comeaux, Ian Anderson &amp; Kushagara Dashora  </p>"},{"location":"block-diagram/#overview","title":"\ud83d\udccc Overview","text":"<p>This page presents the block diagram for the HMI subsystem in our embedded system project.</p>"},{"location":"block-diagram/#decision-making-process","title":"Decision Making Process:","text":"<p>Single\u2011board \u201cHuman\u2011Machine\u2011Interface\u201d node: It must supply\u202fall local user I/O for the larger daisy\u2011chain system.  </p> <p>Hot\u2011plug ribbon\u2011cable bus: Each team board has to pass power plus a 9600\u2011baud UART down the chain and leave four spare lines for team\u2011specific use (Project Protocol spec).  </p> <p>Human\u2011scale UI: Rapid tactile entry and glanceable feedback, powered from the same 3.3V rail. \u2022 4\u202f\u00d7\u202f4 membrane keypad: inexpensive, sealed, plug\u2011in. \u2022 128\u202f\u00d7\u202f64 monochrome OLED: 40\u202fmA max, I\u00b2C already in ESP32 ROM drivers.</p>"},{"location":"block-diagram/#block-diagram-preview","title":"\ud83d\udcf7 Block Diagram Preview","text":""},{"location":"block-diagram/#download-the-block-diagram","title":"\ud83d\udcc1 Download the Block Diagram","text":"<p>Download Block Diagram</p>"},{"location":"block-diagram/#conclusion","title":"Conclusion","text":"<p>The block diagram is component\u2011centric so reviewers can trace every electrical relationship, yet bus\u2011minimal so the firmware stays simple. By rooting the keypad matrix and OLED locally, exposing a single I\u00b2C branch, and treating the daisy\u2011chain purely as a UART repeater plus power feed, the board meets every functional, electrical and integration requirement of the team specification</p>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"component-selection/","title":"Component Selection","text":""},{"location":"component-selection/#home","title":"Home","text":""},{"location":"component-selection/#introduction","title":"Introduction","text":"<p>For our embedded systems design project, we're developing an interactive weather station designed to engage K-12 students with real-time environmental data. Our goal is to create a learning experience where students can easily navigate through different weather modules- like temperature, humidity, solar power and battery status- using a simple keypad driven interface.</p>"},{"location":"component-selection/#criteria","title":"Criteria","text":"<p>To ensure reliable operation, the HMI system requires a stable power supply, necessitating the integration of a voltage regulator. The ESP32-S3-WROOM microcontroller, selected for its low power consumption and direct compatibility with 5V peripherals, manages the user inputs and LCD output. The 16x2 I2C LCD is chosen for its low power usage and simple text display, while the 4x4 membrane keypad provides an efficient user interface for navigating through different data modules.  </p> <p>Additionally, the project incorporates a switching voltage regulator as part of a dedicated power supply lab requirement. This AP63203WU-7 switching regulator is being developed to improve power efficiency, particularly for potential expansion into low-power wireless communication modules. The voltage regulator design process includes selecting appropriate inductors, capacitors, and diodes to ensure stable operation under varying load conditions\u200b.</p> <p>This systematic component selection ensures the HMI module is power-efficient, durable, and user-friendly, meeting both educational and engineering design constraints.</p>"},{"location":"component-selection/#decision-making","title":"Decision Making:","text":"<p>When I sketched the\u202fHMI section I started with the user experience we promised in our project brief: a palm\u2011sized panel that K\u201112 students can poke, read, and instantly understand. From there I worked backward to the parts that make that feel happen.</p> <p>0.96\u2011inch I\u00b2C\u202fOLED.\u202fA tiny monochrome OLED is crisp enough for numbers and icons, yet it sips only a few milliamps\u2014important because our weather\u2011station pods may run from a small solar pack. The I\u00b2C interface keeps wiring to two signal lines plus power, which means we can route it cleanly on a single\u2011layer daughterboard and still have SPI free for future add\u2011ons.</p> <p>4\u202f\u00d7\u202f4 membrane keypad.\u202fInstead of a single button or capacitive touch, a 4\u00d74 matrix gives 16 distinct inputs (up/down, menu, preset angles, etc.) while costing less than one dollar and adding essentially zero current draw. The flat, sealed membrane survives science\u2011fair fingerprints and the occasional spilled juice box, matching our durability goal.</p> <p>ESP32\u2011S3\u202fWROOM.\u202fWe chose the S3 variant because it bundles Wi\u2011Fi, Bluetooth, and enough RAM to run Micropython, which lets teammates tweak display layouts or MQTT topics in minutes. Its plentiful GPIO pins easily cover the keypad matrix, OLED, and a UART link to the upstream sensor node without resorting to GPIO expanders. The on\u2011chip radio also leaves us a path for a future phone\u2011app dashboard if the class scope expands.</p> <p>AP63203WU\u20117 buck regulator.\u202fThe display and MCU both need a rock\u2011solid 3.3\u202fV rail. This little 3\u202fA synchronous converter stays &gt;\u202f90\u202f% efficient at the 150\u2013200\u202fmA peaks the ESP32 draws during Wi\u2011Fi bursts, so we meet the \u201clow\u2011heat, low\u2011noise\u201d power budget spec. Its tiny QFN footprint fits under the OLED board, freeing front\u2011panel real estate, and its 100\u202f% duty\u2011cycle mode lets us wring the battery down to about 3.4\u202fV before the logic starts to brown\u2011out.</p> <p>Together these four parts tick every checkbox in the product requirements: low power, student\u2011friendly interaction, minimal PCB complexity, and head\u2011room for future wireless features.</p>"},{"location":"component-selection/#responsibilities","title":"Responsibilities:","text":"<ul> <li>Sensing: Although my subsystem does not include direct environmental sensing, it will receive sensor data from the sensing module via UART communication and display relevant readings (e.g., temperature, humidity, solar power levels).</li> <li>Actuation: The HMI itself does not control actuators, but it provides a user-friendly way to navigate sensor data, making it a crucial part of the interaction loop.</li> <li>Display: I am implementing a 16x2 I2C LCD, which will show current sensor data and allow users to switch between different weather parameters.</li> <li> <p>Power: The HMI module operates at 5V, requiring a stable AMS1117-5.0 linear voltage regulator to ensure consistent power delivery.  </p> </li> <li> <p>Communication: The PIC18F47Q10 microcontroller in my HMI module communicates with other subsystems via I2C (for the LCD) and UART (for receiving sensor data).</p> </li> </ul>"},{"location":"component-selection/#components","title":"Components","text":""},{"location":"component-selection/#microcontroller-selection","title":"Microcontroller Selection","text":""},{"location":"component-selection/#option-1","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link PIC18F47Q10 Low power, optimized for standalone HMI No WiFi/Bluetooth $5.40 DigiKey Supports I2C for LCD and GPIO for Keypad Limited RAM compared to ESP32 Reliable MPLAB XC8 &amp; MCC support 5V operation (compatible with LCD &amp; keypad)"},{"location":"component-selection/#option-2","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link PIC18F45K50 USB support Lacks built-in MCC Harmony compatibility $6.40 DigiKey More ADC channels May require more external circuitry Slightly cheaper than PIC18F47Q10"},{"location":"component-selection/#option-3","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link ESP32-S3-WROOM-1  (Final Choice) Built-in WiFi/Bluetooth 3.3V logic (incompatible with some peripherals) $3.40 DigiKey Faster CPU &amp; more RAM Higher power consumption Integrated hardware acceleration More complex firmware development"},{"location":"component-selection/#final-selection-esp32-s3-wroom-1-option-3","title":"Final Selection: ESP32-S3-WROOM-1 (Option 3)","text":""},{"location":"component-selection/#rationale","title":"Rationale:","text":"<ul> <li>Built-in Wi-Fi and Bluetooth</li> <li>Multiple Communication Interfaces<ul> <li>I2C Support \u2192 Needed for interfacing with the DOGM204-A LCD display.</li> <li>UART Support \u2192 Required for receiving messages from the daisy chain network.</li> <li>GPIO Support \u2192 Handles 4x4 Keypad scanning for user input.</li> </ul> </li> <li>Ample Flash &amp; RAM for UI Development</li> <li>Strong Open-Source Community &amp; Library Support</li> <li>Low Power Consumption with Switching Regulator</li> </ul>"},{"location":"component-selection/#keypad-selection","title":"Keypad Selection:","text":"<p>The keypad serves as the primary navigation and input interface for the HMI.</p>"},{"location":"component-selection/#option-1_1","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link Membrane 4x4 Keypad (Final Choice) Thin, lightweight, flexible Less tactile feedback $5.95 DigiKey Part Number: 1528-2672-ND Easy to mount on an enclosure Can wear out over time Low power consumption"},{"location":"component-selection/#option-2_1","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link SWITCH JOYSTICK ANALOG 50V Switch is small, making it ideal for compact PCB layouts and space-constrained applications. Typically rated for low current (e.g., 50mA\u2013500mA), which may not be suitable for switching higher-power loads directly. $2.96 DigiKey Part Number: 108-THB001P-ND Provides a clear, tactile response for button presses. It will eventually degrade over time with heavy usage. Suitable for frequent use in embedded systems. Requires external components (e.g., pull-down resistors or debouncing circuits)"},{"location":"component-selection/#option-3_1","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link Tactile Pushbutton Array (Custom) Fully customizable button layout Requires additional wiring and PCB routing $5.95 DigiKey Part Number: TL3315NF160Q Strong feedback Can increase PCB complexity"},{"location":"component-selection/#final-selection-membrane-4x4-keypad-option-1","title":"Final Selection: Membrane 4x4 Keypad (Option 1)","text":""},{"location":"component-selection/#rationale_1","title":"Rationale:","text":"<ul> <li>Low power consumption is ideal for embedded applications.</li> <li>Compact &amp; lightweight for HMI panel mounting.</li> <li>Easier integration using GPIO-based matrix scanning.</li> </ul>"},{"location":"component-selection/#lcd-display-selection","title":"LCD Display Selection","text":"<p>The LCD display provides real-time feedback to the user, showing the selected module.</p>"},{"location":"component-selection/#option-1_2","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link 20x4 I2C LCD (Final Choice) Easy I2C communication No graphical output $26.20 DigiKey <p>|Part Number: 1481-1087-ND |   Low power, simple to use |Slow refresh rate |  | | Readable in sunlight  |</p>"},{"location":"component-selection/#option-2_2","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link 20x4 I2C LCD Larger display area Larger size may not fit in HMI panel $14.00 DigiKey Same I2C interface as 16x2 Slightly higher power consumption More readable text"},{"location":"component-selection/#option-3_2","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link 128x64 Graphical LCD Can display graphs/icons More complex software control $17.45 DigiKey High contrast output Requires SPI instead of I2C"},{"location":"component-selection/#final-selection-16x2-i2c-lcd-option-1","title":"Final Selection: 16x2 I2C LCD (Option 1)","text":""},{"location":"component-selection/#rationale_2","title":"Rationale:","text":"<ul> <li>Supports text-based menu navigation.</li> <li>I2C interface reduces GPIO usage.</li> <li>Low power consumption suits embedded applications.</li> </ul>"},{"location":"component-selection/#voltage-regulator-selection","title":"Voltage Regulator Selection:","text":""},{"location":"component-selection/#option-1_3","title":"Option 1","text":"Option Pros Cons Unit Cost &amp; Link AP63203WU-7 (Final Choice) Low-cost, widely used Adjustable Output Voltage $1.38 DigiKey Part Number: AP63203WU-7 High Efficiency Produces heat at high loads"},{"location":"component-selection/#option-2_3","title":"Option 2","text":"Option Pros Cons Unit Cost &amp; Link LM7805 Linear Regulator Simple drop-in solution Higher power loss than AMS1117 $1.07 DigiKey Part Number: MC7805CTG Stable 5V output Requires heatsink at higher currents"},{"location":"component-selection/#option-3_3","title":"Option 3","text":"Option Pros Cons Unit Cost &amp; Link LM2575 Switching Regulator Higher efficiency More complex circuit (requires inductor) $2.84 DigiKey Part Number: LM9071SX/NOPB Less heat dissipation Higher cost"},{"location":"component-selection/#final-selection-ap63203wu-7","title":"Final Selection: AP63203WU-7","text":""},{"location":"component-selection/#rationale_3","title":"Rationale:","text":"<ul> <li>High Efficiency and Low Power Dissipation</li> <li>Wide Input Voltage Range</li> <li>Adjustable Output Voltage</li> <li>Fewer external components, simplifying PCB layout and reducing cost.</li> </ul>"},{"location":"component-selection/#library-and-compatibility-research-for-esp32","title":"Library and Compatibility Research for ESP32","text":"<ul> <li>To ensure seamless integration of peripherals, I conducted research on library support, potential compatibility issues, and existing code examples for the ESP32. The focus was on the 4x4 matrix keypad, the 16x2 I2C LCD, and voltage regulation to verify that all components could be efficiently interfaced with the microcontroller.</li> </ul>"},{"location":"component-selection/#keypad-4x4-matrix-compatibility-check","title":"Keypad (4x4 Matrix) Compatibility Check","text":"<p>The 4x4 matrix keypad is interfaced using GPIO row-column scanning, where each key press is detected by determining which row and column are connected when a button is pressed. Micropython does not include a built-in library for keypad scanning, so a custom row-column scanning function will be implemented. One known issue with matrix keypads is button debounce, which must be handled in firmware to avoid unintended multiple key detections when a button is pressed.</p> <p>To address this, a state-based debounce algorithm will be implemented, and the rows and columns will be scanned using direct GPIO manipulation in code. This ensures accurate key detection and reliable input processing.</p>"},{"location":"component-selection/#16x2-lcd-i2c-compatibility-check","title":"16x2 LCD (I2C) Compatibility Check","text":"<ul> <li> <p>The selected LCD module communicates using the I2C protocol, which reduces the number of GPIO pins required compared to a parallel-interface LCD. However, some LCD controllers, such as the Hitachi HD44780 and its variants, require specific initialization sequences that may differ between models.</p> </li> <li> <p>To ensure compatibility, the initialization sequence will be tested, and any necessary adjustments will be made within the LiquidCrystal_I2C.h library. This will ensure that the LCD correctly displays menu options and sensor data as intended.</p> </li> </ul>"},{"location":"component-selection/#voltage-regulator-ap63203wu","title":"Voltage Regulator (AP63203WU)","text":"<ul> <li> <p>The HMI system requires a stable 5V power supply to ensure proper operation of the microcontroller, keypad, and LCD. The AP63203WU was selected as the voltage regulator due to its high efficiency and reduced heat dissipation compared to traditional linear regulators like the AMS1117-5.0. As a synchronous buck converter, it provides up to 95% efficiency, minimizing power loss and heat generation.</p> </li> <li> <p>Unlike the AMS1117-5.0, which wastes energy as heat, the AP63203WU efficiently steps down higher input voltages (3.8V to 32V) to a stable 3.3V output, making it suitable for battery-powered and energy-sensitive applications.</p> </li> </ul>"},{"location":"component-selection/#mcc-pin-configuration","title":"MCC Pin Configuration","text":"Peripheral Purpose Assigned Pins GPIO 4x4 Keypad (Row-Column Scanning) RB0 - RB7 I2C (MSSP1) LCD Communication SDA: RC4, SCL: RC3 UART (EUSART1) Data exchange with other modules TX: RB7, RX: RB6 5V Power Voltage Regulation AMS1117-5.0"},{"location":"component-selection/#pin-allocation-analysis","title":"Pin Allocation Analysis","text":""},{"location":"component-selection/#screen-gpio-19-scl-18-sda","title":"Screen (GPIO\u202f19 = SCL,\u202f18 = SDA)","text":"<p>The OLED display talks over I\u00b2C. We parked its two wires on pins\u202f18 and\u202f19 because they sit next to each other and don\u2019t mess with the ESP32\u2019s boot pins. Two little 4\u202fk7 resistors pull those lines up to 3.3\u202fV, so the screen always answers when we call address 0x3C. No more mystery time\u2011outs.</p>"},{"location":"component-selection/#keypad-rows-22-21-23-26-columns-15-2-4-5","title":"Keypad (rows\u202f22\u202f/\u202f21\u202f/\u202f23\u202f/\u202f26, columns\u202f15\u202f/\u202f2\u202f/\u202f4\u202f/\u202f5)","text":"<p>The 4\u00d74 membrane keypad works like a mini grid. Four pins drive the rows; four other pins read the columns. The column pins already have built\u2011in pull\u2011ups, so a pressed key simply drags one column low and the firmware figures out which button it was. We scan 50\u202ftimes per second, so key presses feel instant.</p>"},{"location":"component-selection/#uart-link-rx-16-tx-17","title":"UART link (RX\u202f16, TX\u202f17)","text":"<p>Pin\u202f14 listens to everything KD or Ian sends. Pin\u202f27 is wired but unused for now\u2014handy if we ever daisy\u2011chain another board. Because we\u2019re on UART2, the main USB serial port stays free for debugging.</p>"},{"location":"component-selection/#power-reset","title":"Power &amp; reset","text":"<p>Once we gave the OLED a solid 3.3\u202fV (instead of the shaky 1.7\u202fV we found earlier) the screen popped right up and the I\u00b2C bus settled down. The screen\u2019s reset pin is tied high so it always wakes up cleanly.</p>"},{"location":"component-selection/#conclusion","title":"Conclusion","text":"<p>The component selection process for the HMI subsystem was guided by several key factors, including compatibility, power efficiency, ease of integration, and reliability. The ESP32 microcontroller was chosen due to its low power consumption, built-in I2C support for the LCD, and GPIO capabilities for keypad scanning, making it the most suitable option for this project. The 16x2 I2C LCD was selected for its simple interface, low power requirements, and clear text display, ensuring that users can easily navigate and view real-time weather data.</p> <p>For user input, the 4x4 membrane keypad was chosen due to its compact design, durability, and ease of integration using direct GPIO scanning. To maintain a stable power supply, the AMS1117-5.0 linear voltage regulator was selected to provide a consistent 5V output to the microcontroller, LCD, and keypad, ensuring that all components operate without voltage fluctuations.</p> <p>```</p>"},{"location":"power-distribution/","title":"Power Distribution &amp; Budget Analysis","text":"<p>To estimate the power requirements of our embedded system, we conducted a detailed analysis of each component's current consumption to ensure that our power supply and protective elements, such as the 1.5A fuse, are appropriately rated.</p> <p>Starting with the ESP32-S3 WROOM microcontroller, it typically draws approximately 23.88\u202fmA during active operation. In deep sleep mode, the current consumption can drop to around 8.14\u202f\u00b5A, depending on configuration and board design.</p> <p>The 0.96-inch I\u00b2C OLED display's current draw is contingent on the number of pixels illuminated. Under typical usage, it consumes about 20\u202fmA.</p> <p>The 4\u00d74 membrane keypad, particularly the mLink variant, has an idle current consumption of approximately 4.5\u202fmA.</p> <p>The AP63203WU-7 is a synchronous buck converter capable of delivering up to 2\u202fA of continuous output current. Its quiescent current is notably low, around 22\u202f\u00b5A, making it efficient for our application.</p> <ul> <li>ESP32-S3 WROOM: 23.88\u202fmA</li> <li>OLED Display: 20\u202fmA</li> <li>Keypad: 4.5\u202fmA</li> </ul> <p>Totaling approximately 48.38\u202fmA. To account for potential current spikes and ensure a safety margin, we consider a peak current draw of around 100\u202fmA.</p> <p>Given that our system is protected by a 1.5A fuse, this provides ample headroom above our estimated peak current, ensuring both safety and reliability. The AP63203WU-7 regulator's capacity to handle up to 2\u202fA further reinforces the adequacy of our power design.</p> <p>In conclusion, our power budget analysis confirms that the selected components and protective measures are well-suited for the system's operational requirements, providing both efficiency and safety.</p>"},{"location":"schematic/","title":"Schematic &amp; PCB Design","text":""},{"location":"schematic/#schematic-image","title":"Schematic Image","text":""},{"location":"schematic/#pcb-image","title":"PCB Image","text":""},{"location":"schematic/#download-the-schematic-diagram","title":"\ud83d\udcc1 Download the Schematic Diagram","text":"<p>Download Schematic Diagram PDF</p>"},{"location":"schematic/#download-the-project-zip-file","title":"\ud83d\udcc1 Download the Project Zip File","text":"<p>Download Schematic Zip File</p>"},{"location":"schematic/#schematic-design-overview","title":"Schematic Design Overview","text":"<p>The HMI interface is built around a ESP32-S3-WROOM microcontroller with an I\u00b2C LCD and a 4\u00d74 matrix keypad, all powered from a 12\u202fV supply stepped down to 3.3\u202fV. The schematic below details all connections between components, including power routing and signal lines:</p>"},{"location":"schematic/#power-input-regulator","title":"Power Input &amp; Regulator:","text":"<p>A 12\u202fV, 15\u202fA wall adapter feeds the board through a DC jack (or terminal). This 12\u202fV input is routed to a 3-pin jumper header acting as a power source selector. The selector\u2019s center pin goes to the AP63203WU-7 buck regulator\u2019s VIN; one outer pin connects to the external 12\u202fV jack and the other to the \u201cupstream\u201d 12\u202fV line from the system bus. By placing a jumper, the regulator VIN can be fed from either the external adapter or an upstream supply (but never both). The AP63203WU-7 is a 3.3\u202fV, 2\u202fA synchronous buck converter that steps 12\u202fV down to 3.3\u202fV for all electronics. Its output (VOUT) is filtered with two 22\u202f\u00b5F ceramics and a 0.1\u202f\u00b5F capacitor to ensure stable DC output, and its input (VIN) is decoupled with a 10\u202f\u00b5F bulk capacitor. The regulator\u2019s feedback (FB) pin is tied directly to 3.3\u202fV (fixed-output mode), and the EN pin is tied high (to VIN) for automatic startup.</p>"},{"location":"schematic/#upstreamdownstream-bus-connectors","title":"Upstream/Downstream bus connectors:","text":"<p>Two 8-pin low-profile shrouded headers carry power and signals to other modules. The 12\u202fV bus from the power selector connects to pin 1 of both headers (and thus distributes 12\u202fV to other boards). The regulated 3.3\u202fV output is made available on pin 2 of the headers for powering downstream logic if needed. Pins 3\u20134 are tied to ground (providing at least two ground return paths for current). The remaining pins carry I\u00b2C and general-purpose signals (described below).</p>"},{"location":"schematic/#keypad-interface","title":"Keypad Interface:","text":"<p>The 4\u00d74 matrix keypad connects to eight GPIOs. Four row lines are driven as outputs, and four column lines are inputs with interrupt-on-change. The ESP32-S3-WROOM is ideal since RB4\u2013RB7 support \u201cinterrupt on change\u201d (IOC) for keypress detection. In the schematic, RB0\u2013RB3 are connected to Row1\u2013Row4 of the keypad, and RB4\u2013RB7 to Col1\u2013Col4. Each row output goes through a 220\u202f\u03a9 resistor before the keypad connector.</p> <p>When any key is pressed, it connects a row (which the firmware will drive low during scan) to a column, pulling that column input low and triggering an IOC interrupt. The keypad\u2019s 8-pin connector is wired straight to the ESP pins (with the series resistors on row lines as noted). Ground from the keypad\u2019s common pin (if any shielding or reference) is tied to the board ground. The keypad connector and signals are placed away from the switching regulator on the PCB to avoid noise coupling into the high-impedance input lines.</p>"},{"location":"schematic/#design-decision-making-process","title":"Design &amp; Decision Making Process","text":"<p>At our very first white\u2011board session we wrote the K\u201112 \u201cday\u2011of\u2011expo\u201d scenario in the middle and drew concentric rings of constraints around it: What must the student see? What must they press? How long may it stay unpowered? Only when every stakeholder need (student, teacher, grader, maintenance tech) had at least one measurable requirement did we let ourselves name silicon. This kept us from biasing the solution toward the parts already in our junk boxes.</p>"},{"location":"schematic/#motor-node-alex","title":"Motor node (Alex).","text":"<p>Alex\u2019s step\u2011per\u2011degree motor driver had to accept angle commands regardless of which upstream board sent them. Together we fixed on a single\u2011byte\u202f\u00b1\u202f255\u2011degree payload inside our \u201cA\u202fZ \u2026 Y\u202fB\u201d UART frame and pressure\u2011tested it with Alex\u2019s firmware on the bench while I injected frames from both a logic\u2011generator and the ESP32 REPL. That exercise caught an endian mismatch early, so the motor now snaps exactly 5\u00b0 whenever the keypad issues a * or #.</p>"},{"location":"schematic/#sensor-pod-kushagra-and-individual-sensors-ian","title":"Sensor pod (Kushagra) and individual sensors (Ian).","text":"<p>Ian\u2019s raw temperature, humidity, wind, and barometric sensors all speak I\u00b2C at 3\u202f.3\u202fV, but Kushagra\u2019s aggregate board repackages them into the same UART frame structure the motor uses. This meant the HMI had only one parser to maintain. As a group we defined SUB_TEMP\u202f=\u202f2, SUB_HUM\u202f=\u202f3, and so on, then wrote a shared header file so C on the PIC and MicroPython on the ESP32 compile against the same constants. In joint testing we flooded the bus with out\u2011of\u2011order packets; the OLED still showed coherent readings because every packet has its sub\u2011ID stamped on byte\u202f0.</p>"},{"location":"schematic/#mqtt-bridge-me","title":"MQTT bridge (me).","text":"<p>My ESP32 HMI had to forward valid sensor frames to KD's Wi\u2011Fi without breaking the real\u2011time motor link. To guarantee coexistence I ran the UART parser in an IRQ\u2011free tight loop, queued decoded readings, and let an asyncio task publish to MQTT in the background. This proved our bandwidth budgeting and ensured no component monopolised the ESP32.</p>"},{"location":"schematic/#team-glue","title":"Team glue.","text":"<p>Every Friday we swapped boards: Ian plugged his sensor PCB into Kushagra\u2019s hub, which then talked to Alex\u2019s motor driver on a separate power rail while my HMI listened and posted MQTT. The result is a set of subsystems that slot together seamlessly\u2014the motor moves when data arrives, the HMI never displays stale numbers, and remote dashboards mirror exactly what the kids see in front of them\u2014all because compatibility was baked into every sprint, not stapled on at the end. </p>"},{"location":"second-page/","title":"Second Page","text":"<p>Things to discuss</p>"},{"location":"version-improvements/","title":"Toward Hardware\u202fDesign\u202fV\u202f2.0 \u2014 targeted refinements for a stronger, safer, and more extensible HMI board","text":"<p>A full semester of bench time\u2014and five public demo sessions\u2014has revealed a handful of friction points that Version\u202f1.0 masked.\u202fBelow is a \u201cwish\u2011list\u201d for Version\u202f2.0, grouped by schematic block.\u202fTaken together, these changes would streamline manufacturing, raise robustness for long\u2011term classroom deployment, and open headroom for the next round of features.</p> <ol> <li>Power\u2011input &amp; regulation</li> </ol> <p>What we learned: the AP63203WU\u20117 buck operates comfortably at 200\u202fmA load, but the in\u2011rush spike from the OLED charge\u2011pump and Wi\u2011Fi TX bursts still nudges the 1\u202f.5\u202fA resettable fuse.\u202fWhy improve: repeated fuse trips annoy teachers and worry students who think they \u201cbroke it.\u201d</p> <ul> <li> <p>Upgrade path:</p> <ul> <li> <p>Replace the polyfuse + buck pair with a pre\u2011regulated 5\u202fV\u202f\u2192\u202f3\u202f.3\u202fV DC barrel supply and add a low\u2011IQ LDO locally for the OLED (isolates surge).</p> </li> <li> <p>Integrate a load\u2011switch with soft\u2011start (e.g., TPS22918) on the 3\u202f.3\u202fV rail: slope\u2011limited turn\u2011on caps the in\u2011rush at ~80\u202fmA, giving the upstream wall\u2011wart relaxed specs.</p> </li> <li> <p>Move the large 100\u202f\u00b5F electrolytic closer to the barrel jack (sheet: Power) to satisfy ripple spec before it splashes into the board.</p> </li> </ul> </li> <li> <p>Spare I/O and feature headroom</p> </li> </ul> <p>What we learned: teachers asked for a buzzer alert and students wanted a \u201cnext\u2011page\u201d capacitive swipe.\u202fWe currently have only two spare GPIOs broken out.</p> <ul> <li> <p>Upgrade path:</p> <ul> <li>Replace the one\u2011row debug header with a 12\u2011pin header exposing six strappable GPIOs plus 3\u202f.3\u202fV and GND. Costs peanuts, grants future sensor or haptic\u2011motor add\u2011ons. Pre\u2011route a PWM trace to a no\u2011load pad footprint. If unpopulated, adds zero BOM and negligible capacitance.</li> </ul> </li> </ul>"},{"location":"version-improvements/#conclusion","title":"Conclusion","text":"<p>None of these changes overhaul the architecture\u2014they polish it.\u202fThey convert the \u201cgood enough for a semester\u201d V\u202f1.0 board into a deploy\u2011and\u2011forget instructional tool that can survive many school years, accept new lesson modules, and stand up to the real\u2011world rough\u2011and\u2011tumble of science fairs. Version\u202f2.0 would markedly raise reliability, maintainability, and pedagogical flexibility\u2014turning a successful prototype into a product\u2011grade teaching asset. </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}